# -*- coding: utf-8 -*-
"""EDA MULTIVARIANT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-N7lmwxGyrMIvPwmD0V5tSfgrbcN2hu8
"""

import pandas as pd
import numpy as npdf
import seaborn as sns
import matplotlib.pyplot as plt

dp = pd.read_csv(r'C:\Users\USER\Downloads\employee_survey.csv', sep =',')
dp

dp.shape

total = dp.isnull().sum().sort_values(ascending= False)
total

df = dp[['WLB', 'JobSatisfaction', 'Stress', 'WorkEnv']]

# Memeriksa data untuk memastikan tidak ada nilai NaN
print(df.isnull().sum())

# Mendefinisikan variabel independen dan dependen
import statsmodels.api as sm
X = df[['WLB', 'Stress', 'WorkEnv']]
y = df['JobSatisfaction']

# Menambahkan konstanta ke model (intercept)
X = sm.add_constant(X)

# Membuat model regresi linier
model = sm.OLS(y, X).fit()

# Melihat hasil regresi
print(model.summary())

# pair plot with plot type regression
sns.pairplot(df,vars = ['WLB', 'Stress','WorkEnv'], kind="reg")
plt.show()

#pair plot (matrix scatterplot) of few columns
sns.set(style="ticks", color_codes=True)
sns.pairplot(df,vars = ['WLB', 'Stress','WorkEnv'], hue="JobSatisfaction")
plt.show()

fig, axes = plt.subplots(2, 2, figsize=(12, 8))
fig.suptitle("Distribution of WLB, JobSatisfaction, Stress, and WorkEnv")

# Plot untuk WLB
sns.histplot(df['WLB'], bins=5, kde=True, ax=axes[0, 0], color="skyblue")
axes[0, 0].set_title("Distribution of WLB")

# Plot untuk JobSatisfaction
sns.histplot(df['JobSatisfaction'], bins=5, kde=True, ax=axes[0, 1], color="salmon")
axes[0, 1].set_title("Distribution of JobSatisfaction")

# Plot untuk Stress
sns.histplot(df['Stress'], bins=5, kde=True, ax=axes[1, 0], color="lightgreen")
axes[1, 0].set_title("Distribution of Stress")

# Plot untuk WorkEnv
sns.histplot(df['WorkEnv'], bins=5, kde=True, ax=axes[1, 1], color="orange")
axes[1, 1].set_title("Distribution of WorkEnv")

plt.tight_layout()
plt.show()

from scipy import stats

# Menghitung korelasi Pearson untuk masing-masing variabel terhadap JobSatisfaction
variables = ['WLB', 'Stress', 'WorkEnv']
for var in variables:
    corr = stats.pearsonr(df[var], df['JobSatisfaction'])
    print(f"Korelasi antara {var} dan JobSatisfaction:")
    print("p-value:\t", corr[1])
    print("cor:\t\t", corr[0])
    print()

correlation = df.corr(method='pearson')
correlation

sns.heatmap(correlation,xticklabels=correlation.columns, yticklabels=correlation.columns, annot=True)

import pandas as pd
from semopy import Model, Optimizer
import matplotlib.pyplot as plt
import networkx as nx

# Memilih kolom yang relevan untuk analisis jalur
df = df[['Workload', 'SleepHours', 'WLB', 'JobSatisfaction']]

# Definisikan model jalur (path model)
model_desc = """
WLB ~ Workload + SleepHours
JobSatisfaction ~ WLB + Workload
"""

# Membuat model
model = Model(model_desc)

# Load the dataset into the model
model.load_dataset(df)

# Membuat dan menyesuaikan model
opt = Optimizer(model)
opt.optimize()

# Menampilkan hasil estimasi
# Use the model's `inspect` method to get parameter estimates
results = model.inspect()
print(results)

# Visualisasi model jalur menggunakan NetworkX
edges = [("Workload", "WLB"), ("SleepHours", "WLB"), ("WLB", "JobSatisfaction"), ("Workload", "JobSatisfaction")]
G = nx.DiGraph()
G.add_edges_from(edges)

plt.figure(figsize=(8, 6))
pos = nx.spring_layout(G)  # positions for all nodes
nx.draw(G, pos, with_labels=True, node_size=3000, node_color="lightblue", font_size=10, font_weight="bold", arrows=True)
plt.title("Path Analysis Model")
plt.show()

